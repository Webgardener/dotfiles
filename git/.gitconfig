[user]
  name = Thomas Weiss
  email = thomas.weiss@hyoo.fr
[pull]
  rebase = true
[alias]
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	history = log --pretty=format:\"[%h] %ae, %ar: %s\" --stat
	poule = ! bash -c 'source $HOME/dotfiles/shell/poule.sh && poule && git pull'
  # common aliases
	a = add
	b = branch
	c = commit
	d = diff
	f = fetch
	g = grep
	l = log
	m = merge
	o = checkout
	p = pull
	r = remote
	s = status
	w = whatchanged

	br = branch
	ci = commit
	co = checkout
	cp = cherry-pick
	st = status

# add just the files that are updated.
	au = add --update
	ca = commit --amend
	# commit - amend the tip of the current branch, and do not edit the message.
	cane = commit --amend --no-edit
	# commit with a message
	cm = commit --message

### cherry-pick ###
	
	 # cherry-pick - apply the changes introduced by some existing commits; useful for moving small chunks of code between branches.
	 cp = cherry-pick

	 # cherry-pick - abort the picking process
	 cpa = cherry-pick --abort

	 # cherry-pick - continue the picking process
	 cpc = cherry-pick --continue

	 # cherry-pick without making a commit, and when when recording the commit, append a line that says "(cherry picked from commit ...)"
	 cp-nx = cherry-pick --no-commit -x

	 ### diff ###

	 # diff - show changes about to be commited
	 ds = diff --staged

	 # diff - show changes but by word, not line
	 dw = diff --word-diff

	 lg = log --graph
	 lo = log --oneline

	 ls = ls-files

	 ### rebase ###

	 # rebase - forward-port local commits to the updated upstream head.
	 rb = rebase

	 # rebase abort - cancel the rebasing process
	 rba = rebase --abort

	 # rebase - continue the rebasing process after resolving a conflict manually and updating the index with the resolution.
	 rbc = rebase --continue

	 # rebase - restart the rebasing process by skipping the current patch.
	 rbs = rebase --skip


	 amend = commit --amend
	 content = log --name-only --oneline
	 history = log --graph --oneline
	 resume = log --oneline


	 # Friendly wording is easier to remember.
	 # Thanks to http://gggritso.com/human-git-aliases
	 branches = branch -a
	 tags = tag -n1 --list
	 stashes = stash list

	 # Get the current branch name
	 branch-name = rev-parse --abbrev-ref HEAD

	 # Publish the current branch by pushing it to the remote "origin",
	 # and setting the current branch to track the upstream branch.
	 publish = !"git push --set-upstream origin $(git branch-name)"

	 synchronize = !"git fetch --all"

	 # Pull the branch properly into the branch of the same name
	 retrieve = !"git pull origin $(git branch-name)"
